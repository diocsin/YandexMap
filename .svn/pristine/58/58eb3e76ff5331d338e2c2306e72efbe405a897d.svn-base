Ext.define('Isidamaps.services.monitoringView.MapService', {
    map: null,
    objectManager: null,
    callsModel: null,
    viewModel: null,
    brigadesMarkers: [],
    callMarkers: [],
    filterBrigadeArray: [],
    filterCallArray: [],
    brigadeStore: null,
    callStore: null,
    station: [],
    urlGeodata: null,
    // ====
    markerClick: Ext.emptyFn,
    clustersClick: Ext.emptyFn,
    getStoreMarkerInfo: Ext.emptyFn,
    // ====
    constructor: function (options) {
        var me = this;
        me.markerClick = options.markerClick;
        me.clustersClick = options.clustersClick;
        me.viewModel = options.viewModel;
        me.boundsMap = options.boundsMap;
        me.filterBrigadeArray = options.filterBrigadeArray;
        me.filterCallArray = options.filterCallArray;
        me.urlGeodata = options.urlGeodata;
        me.getStoreMarkerInfo = options.getStoreMarkerInfo;
        me.map = new ymaps.Map('mapId-innerCt', {
            bounds: me.boundsMap,
            controls: ['trafficControl']
        });
        me.map.behaviors.disable('dblClickZoom'); //отключение приближения при двойном клике по карте
        me.objectManager = new ymaps.ObjectManager({
            clusterize: true,
            clusterDisableClickZoom: true,
            clusterOpenBalloonOnClick: false
        });
        me.objectManager.objects.options.set({
            iconLayout: 'default#image',
            zIndex: 2000,
            iconImageSize: [40, 40]

        });
        me.objectManager.clusters.options.set({
            zIndex: 3000,
            groupByCoordinates: true
        });
    },

    optionsObjectManager: function () {
        var me = this;
        me.objectManager.objects.events.add(['click'], function (e) {
            var object = me.objectManager.objects.getById(e.get('objectId')),
                storeMarker = me.getStoreMarkerInfo(object);
            me.markerClick(object, [e._sourceEvent.originalEvent.clientPixels[0], e._sourceEvent.originalEvent.clientPixels[1]], storeMarker);
        });
        me.objectManager.clusters.events.add(['click'], function (e) {
            var object = me.objectManager.clusters.getById(e.get('objectId'));
            me.clustersClick([e._sourceEvent.originalEvent.clientPixels[0] - 220, e._sourceEvent.originalEvent.clientPixels[1] + 20], object);
        });
    },

    addMarkers: function () {
        var me = this;
        me.brigadesMarkers.forEach(function (brigade) {
            if (me.objectManager.objects.getById(brigade.id) != null) {
                me.objectManager.remove(brigade);
            }
            if (me.filterBrigadeArray.indexOf(brigade.customOptions.station) === -1 &&
                me.filterBrigadeArray.indexOf(brigade.customOptions.status) === -1 &&
                me.filterBrigadeArray.indexOf(brigade.customOptions.profile) === -1) {
                me.objectManager.add(brigade);
            }

        });
        me.callMarkers.forEach(function (call) {
            if (me.filterCallArray.indexOf(call.customOptions.status) === -1 &&
                me.filterCallArray.indexOf(call.customOptions.station) === -1) {
                me.objectManager.add(call);
            }
            if (call.customOptions.status === "COMPLETED") {
                me.objectManager.remove(call);
            }
        });
        me.map.geoObjects.add(me.objectManager);
    },

    addButtonsBrigadeOnPanel: function () {
        Ext.fireEvent('addButtonsBrigadeOnPanel');
        Ext.fireEvent('addStationFilter');
    },

    setStation: function (station) {
        this.Monitoring.readStation(station);
    },

    readStation: function (station) {
        var me = this;
        me.station = station;
        var t = Ext.Object.toQueryString({
                stations: me.station
            }),
            urlBrigade = Ext.String.format(me.urlGeodata + '/data?{0}&statuses=', t),
            urlCall = Ext.String.format(me.urlGeodata + '/call?{0}', t);
        me.brigadesMarkers = [];
        me.callMarkers = [];
        me.brigadeStore = Ext.create('Ext.data.Store', {
            model: 'Isidamaps.model.Brigade',
            proxy: {
                type: 'ajax',
                url: urlBrigade,
                reader: {
                    type: 'json'
                }
            },
            autoLoad: false
        });
        me.callStore = Ext.create('Ext.data.Store', {
            model: 'Isidamaps.model.Call',
            proxy: {
                type: 'ajax',
                url: urlCall,
                reader: {
                    type: 'json'
                }
            },
            autoLoad: false
        });
        me.callStore.load(function (records) {
            records.forEach(function (call) {
                if (call.get('latitude') !== undefined || call.get('longitude') !== undefined) {
                    me.callMarkers.push({
                        type: 'Feature',
                        id: call.get('callCardId'),
                        customOptions: {
                            objectType: call.get('objectType'),
                            status: call.get('status'),
                            callCardNum: call.get('callCardNum'),
                            station: call.get('station')
                        },
                        geometry: {
                            type: 'Point',
                            coordinates: [call.get('latitude'), call.get('longitude')]
                        },
                        options: {
                            iconImageHref: 'resources/icon/' + call.get('iconName')
                        }
                    })
                }
            });
            me.brigadeStore.load(function (records) {
                records.forEach(function (brigade) {
                    if (brigade.get('latitude') !== undefined || brigade.get('longitude') !== undefined) {
                        me.brigadesMarkers.push({
                            type: 'Feature',
                            id: brigade.get('deviceId'),
                            customOptions: {
                                objectType: brigade.get('objectType'),
                                profile: brigade.get('profile'),
                                status: brigade.get('status'),
                                station: brigade.get('station'),
                                brigadeNum: brigade.get('brigadeNum')
                            },
                            geometry: {
                                type: 'Point',
                                coordinates: [brigade.get('latitude'), brigade.get('longitude')]
                            },
                            options: {
                                iconImageHref: 'resources/icon/' + brigade.get('iconName')
                            },
                            properties: {
                                hintContent: 'Бригада ' + brigade.get('brigadeNum')
                            }
                        })
                    }
                });
                me.addMarkers();
                me.addButtonsBrigadeOnPanel();
            });
        });
    },

    createMarkers: function () {
        var me = this,
            callRecords = me.viewModel.getStore('Calls').getData().items;
        callRecords.forEach(function (call) {
            me.callMarkers.forEach(function (callInArray) {
                if (callInArray.id === call.get('callCardId')) {
                    var index = me.callMarkers.indexOf(callInArray);
                    me.callMarkers.splice(index, 1);
                }
            });
            if (call.get('latitude') !== undefined || call.get('longitude') !== undefined) {
                me.callMarkers.push({
                    type: 'Feature',
                    id: call.get('callCardId'),
                    customOptions: {
                        objectType: call.get('objectType'),
                        status: call.get('status'),
                        callCardNum: call.get('callCardNum'),
                        station: call.get('station')
                    },
                    geometry: {
                        type: 'Point',
                        coordinates: [call.get('latitude'), call.get('longitude')]
                    },
                    options: {
                        iconImageHref: 'resources/icon/' + call.get('iconName')
                    }
                })
            }
        });
        var brigadeRecords = me.viewModel.getStore('Brigades').getData().items;
        brigadeRecords.forEach(function (brigade) {
            me.brigadesMarkers.forEach(function (brigadeInArray) {
                if (brigadeInArray.id === brigade.get('deviceId')) {
                    var index = me.brigadesMarkers.indexOf(brigadeInArray);
                    me.brigadesMarkers.splice(index, 1);
                }
            });
            if (call.get('latitude') !== undefined || call.get('longitude') !== undefined) {
                me.brigadesMarkers.push({
                    type: 'Feature',
                    id: brigade.get('deviceId'),
                    customOptions: {
                        objectType: brigade.get('objectType'),
                        profile: brigade.get('profile'),
                        status: brigade.get('status'),
                        station: brigade.get('station'),
                        brigadeNum: brigade.get('brigadeNum')
                    },
                    geometry: {
                        type: 'Point',
                        coordinates: [brigade.get('latitude'), brigade.get('longitude')]
                    },
                    options: {
                        iconImageHref: 'resources/icon/' + brigade.get('iconName')
                    },
                    properties: {
                        hintContent: 'Бригада ' + brigade.get('brigadeNum')
                    }
                })
            }
        });
        me.addMarkers();
    },

    resizeMap: function () {
        this.map.container.fitToViewport();
    }
});
