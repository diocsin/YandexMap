Ext.define('Isidamaps.services.localMonitoringView.LocalMonitoringController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.localmonitoring',
  LocalMonitoring: null,
  filterBrigadeArray: [],
  filterCallArray: [],
  stompClient: null,
  urlGeodata: null,
  urlWebSocket: null,
  listen: {
    global: {
      checkedProfileBrigade: 'checkedProfileBrigade',
      checkedStatusBrigade: 'checkedStatusBrigade',
      checkedStationBrigade: 'checkedStationBrigade',
      checkedCallStatus: 'checkedCallStatus',
      addButtonsBrigadeOnPanel: 'addButtonsBrigadeOnPanel',
      addElementFilter: 'addElementFilter'
    }
  },

  checkedCallStatus: function(checkbox, checked) {
    var me = this;
    var checkboxValue = checkbox.inputValue;
    var checkboxChecked = checkbox.checked;
    if (checkboxChecked == false) {
      me.filterCallArray.push(checkboxValue);
      var i = 0;
      var stBf = this.lookupReference('callStatusFilter');
      stBf.items.each(function(checkbox) {
        if (checkbox.checked == true) {
          i++
        }
      });
      if (stBf.items.length == i + 1) {
        me.lookupReference('allCalls').setValue(false)
      }
      me.LocalMonitoring.callMarkers.forEach(function(call) {
        if (checkboxValue == call.customOptions.status) {
          me.LocalMonitoring.objectManager.objects.remove(call);
        }
      })
    }
    if (checkboxChecked == true) {
      var index = me.filterCallArray.indexOf(checkboxValue);
      me.filterCallArray.splice(index, 1);
      var i = 0;
      me.LocalMonitoring.callMarkers.forEach(function(call) {
        if (checkboxValue == call.customOptions.status) {
          me.LocalMonitoring.objectManager.objects.add(call);
        }
      })
      var stBf = this.lookupReference('callStatusFilter');
      stBf.items.each(function(checkbox) {
        if (checkbox.checked == true) {
          i++
        }
      });
      if (stBf.items.length == i) {
        me.lookupReference('allCalls').setValue(true)
      }
    }
  },

  checkedStationBrigade: function(checkbox, checked) {
    var me = this;
    var checkboxValue = checkbox.inputValue;
    var checkboxChecked = checkbox.checked;
    if (checkboxChecked == false) {
      me.filterBrigadeArray.push(checkboxValue);
      var i = 0;
      var stBf = this.lookupReference('stationFilter');
      stBf.items.each(function(checkbox) {
        if (checkbox.checked == true) {
          i++
        }
      });
      if (stBf.items.length == i + 1) {
        me.lookupReference('allStation').setValue(false)
      }
      me.LocalMonitoring.brigadesMarkers.forEach(function(brigade) {
        if (checkboxValue == brigade.customOptions.station) {
          me.LocalMonitoring.objectManager.objects.remove(brigade);
        }
      })
    }
    if (checkboxChecked == true) {
      var index = me.filterBrigadeArray.indexOf(checkboxValue);
      me.filterBrigadeArray.splice(index, 1);
      var i = 0;
      me.LocalMonitoring.brigadesMarkers.forEach(function(brigade) {
        if (checkboxValue == brigade.customOptions.station) {
          if (me.filterBrigadeArray.indexOf(brigade.customOptions.status) == -1 && me.filterBrigadeArray.indexOf(brigade.customOptions.profile) == -1) {
            me.LocalMonitoring.objectManager.objects.add(brigade);
          }
        }
      })
      var stBf = this.lookupReference('stationFilter');
      stBf.items.each(function(checkbox) {
        if (checkbox.checked == true) {
          i++
        }
      });
      if (stBf.items.length == i) {
        me.lookupReference('allStation').setValue(true)
      }
    }
  },

  checkedProfileBrigade: function(checkbox, checked) {
    var me = this;
    var checkboxValue = checkbox.inputValue;
    var checkboxChecked = checkbox.checked;
    if (checkboxChecked == false) {
      me.filterBrigadeArray.push(checkboxValue);
      var i = 0;
      var stBf = this.lookupReference('profileBrigadeFilter');
      stBf.items.each(function(checkbox) {
        if (checkbox.checked == true) {
          i++
        }
      });
      if (stBf.items.length == i + 1) {
        me.lookupReference('allProfile').setValue(false)
      }
      me.LocalMonitoring.brigadesMarkers.forEach(function(brigade) {
        if (checkboxValue == brigade.customOptions.profile) {
          me.LocalMonitoring.objectManager.objects.remove(brigade);
        }
      })
    }
    if (checkboxChecked == true) {
      var index = me.filterBrigadeArray.indexOf(checkboxValue);
      me.filterBrigadeArray.splice(index, 1);
      var i = 0;
      me.LocalMonitoring.brigadesMarkers.forEach(function(brigade) {
        if (checkboxValue == brigade.customOptions.profile) {
          if (me.filterBrigadeArray.indexOf(brigade.customOptions.status) == -1 && me.filterBrigadeArray.indexOf(brigade.customOptions.station) == -1) {
            me.LocalMonitoring.objectManager.objects.add(brigade);
          }
        }
      })
      var stBf = this.lookupReference('profileBrigadeFilter');
      stBf.items.each(function(checkbox) {
        if (checkbox.checked == true) {
          i++
        }
      });
      if (stBf.items.length == i) {
        me.lookupReference('allProfile').setValue(true)
      }
    }
  },

  checkedStatusBrigade: function(checkbox, checked) {
    var me = this;
    var checkboxValue = checkbox.inputValue;
    var checkboxChecked = checkbox.checked;
    if (checkboxChecked == false) {

      me.filterBrigadeArray.push(checkboxValue);
      var i = 0;
      var stBf = this.lookupReference('statusBrigadeFilter');
      stBf.items.each(function(checkbox) {
        if (checkbox.checked == true) {
          i++
        }
      });
      if (stBf.items.length == i + 1) {
        me.lookupReference('allStatus').setValue(false)
      }
      me.LocalMonitoring.brigadesMarkers.forEach(function(brigade) {
        if (checkboxValue == brigade.customOptions.status) {
          me.LocalMonitoring.objectManager.objects.remove(brigade);
        }
      })
    }
    if (checkboxChecked == true) {
      var index = me.filterBrigadeArray.indexOf(checkboxValue);
      me.filterBrigadeArray.splice(index, 1);
      var i = 0;
      me.LocalMonitoring.brigadesMarkers.forEach(function(brigade) {
        if (checkboxValue == brigade.customOptions.status) {
          if (me.filterBrigadeArray.indexOf(brigade.customOptions.profile) == -1 && me.filterBrigadeArray.indexOf(brigade.customOptions.station) == -1) {
            me.LocalMonitoring.objectManager.objects.add(brigade);
          }
        }
      })
      var stBf = this.lookupReference('statusBrigadeFilter');
      stBf.items.each(function(checkbox) {
        if (checkbox.checked == true) {
          i++
        }
      });
      if (stBf.items.length == i) {
        me.lookupReference('allStatus').setValue(true)
      }
    }
  },

  mainBoxReady: function() {
    var me = this;
    property = me.getViewModel().getStore('Property');
    property.load(function(records) {
      records.forEach(function(data) {
        me.urlGeodata = data.get('urlGeodata');
        me.urlWebSocket = data.get('urlWebSocket');
      })
      ymaps.ready(function() {
        me.createMap();
      });
        me.connect();
    });
  },

  connect: function() {
    var me = this;
    var socket = new SockJS(me.urlWebSocket+'/geo');
    me.stompClient = Stomp.over(socket);
    me.stompClient.connect({}, function(frame) {
      console.log('Connected: ' + frame);
      me.stompClient.subscribe('/geo-queue/geodata-updates', function(greeting) {
        console.dir(greeting);
        me.showGreeting(JSON.parse(greeting.body));
      });
    });
  },

  showGreeting: function(message) {
    var me = this;
    if (me.LocalMonitoring.station.indexOf(message.station) != -1) {
      if (message.objectType == 'BRIGADE') {
        var store = me.getViewModel().getStore('Brigades');
        store.loadRawData(message);
          me.LocalMonitoring.createMarkers();
      }
      if (message.objectType == 'CALL') {
        var store = me.getViewModel().getStore('Calls');
        store.loadRawData(message);
          me.LocalMonitoring.createMarkers()
      }
    }
  },

  sendName: function() {
    //stompClient.send("/app/hello", {}, JSON.stringify({ 'name': name }));
  },
  disconnect: function() {
    stompClient.disconnect();
    console.log("Disconnected");
  },

  createMap: function() {
    var me = this;
    var bounds = [
      [60.007645, 30.092139],
      [59.923862, 30.519157]
    ];
    me.LocalMonitoring = Ext.create('Isidamaps.services.localMonitoringView.MapService', {
      viewModel: me.getViewModel(),
      markerClick: me.markerClick,
      clustersClick: me.clustersClick,
      boundsMap: bounds,
      filterBrigadeArray: me.filterBrigadeArray,
      filterCallArray: me.filterCallArray,
      urlGeodata: me.urlGeodata,
      getStoreMarkerInfo: me.getStoreMarkerInfo
    });
    me.LocalMonitoring.optionsObjectManager();
    var ymapWrapper = me.lookupReference('ymapWrapper');
    ymapWrapper.on('resize', function() {
      me.LocalMonitoring.resizeMap();
    });
  },

  layoutReady: function() {
    this.fireTabEvent(this.lookupReference('navigationPanel'));
  },

  addElementFilter: function() {
    var me = this;
    var checkboxStation = me.lookupReference('stationFilter');
    var records = me.LocalMonitoring.station;
    records.forEach(function(rec) {
      checkboxStation.add(Ext.create('Ext.form.field.Checkbox', {
        boxLabel: rec,
        inputValue: rec,
        checked: true,
        listeners: {
          change: {
            fn: function(checkbox, checked) {
              Ext.fireEvent('checkedStationBrigade', checkbox, checked);
            }
          }
        }
      }));
    })
  },

  addButtonsBrigadeOnPanel: function() {
    var me = this;
    var buttonBrigade = me.lookupReference('BrigadePanel');
    buttonBrigade.removeAll();
    var brigadeSort = me.LocalMonitoring.brigadesMarkers;

    brigadeSort.sort(function(a, b) {
      return a.customOptions.brigadeNum - b.customOptions.brigadeNum
    });
    brigadeSort.forEach(function(e) {
      buttonBrigade.add(Ext.create('Ext.Button', {
        text: e.customOptions.brigadeNum,
        minWidth: 70,
        //padding: '2px 15px',
        margin: 5,
        listeners: {
          click: function(r) {
            var infoMarker = me.getStoreMarkerInfo(e);
            me.markerClick(e, [r.getXY()[0] + 150, r.getXY()[1] + 30], infoMarker);
          }
        }
      }))
    })
  },

  getStoreMarkerInfo: function(object) {
    var me = this;
    var urlInfoMarker = Ext.String.format(me.urlGeodata + '/info?objectid={0}&objecttype={1}', object.id, object.customOptions.objectType);
    if (object.customOptions.objectType == 'BRIGADE') {
      var infoBrigade = Ext.create('Ext.data.Store', {
        model: 'Isidamaps.model.InfoBrigade',
        proxy: {
          type: 'ajax',
          url: urlInfoMarker,
          reader: {
            type: 'json',
            rootProperty: 'additionalInfo.brigade'
          }
        },
        autoLoad: false
      });
      return infoBrigade;
    }
    if (object.customOptions.objectType == 'CALL') {
      var infoCall = Ext.create('Ext.data.Store', {
        model: 'Isidamaps.model.InfoCall',
        proxy: {
          type: 'ajax',
          url: urlInfoMarker,
          reader: {
            type: 'json',
            rootProperty: 'additionalInfo.call'
          }
        },
        autoLoad: false
      });
      return infoCall;
    }
    //me.markerClick(object, e, infoBrigade, infoCall);
  },

  tabChange: function(panel, newTab, oldTab) {
    oldTab.fireEvent('tabExit');
    this.fireTabEvent(newTab);
  },

  fireTabEvent: function(tab) {
    tab.fireEvent('tabEnter');
  },

  clustersClick: function(e, cluster) {
    var me = this;
    var win = Ext.WindowManager.getActive();
    if (win) {
      win.close();
    }
    var ymapWrapper = Ext.getCmp('mapId');
    var sizeCmp = ymapWrapper.getSize();
    sizeCmp.width = sizeCmp.width * 1.25;
    if ((sizeCmp.width / 2) < e[0]) {
      e[0] -= 600;
      e[1] += 20;
    }
    if ((sizeCmp.height / 2) < e[1]) {
      e[1] -= 300;
    }
    Ext.create('Ext.window.Window', {
      title: 'Кластер',
      layout: 'hbox',
      resizable: true,
      border: 'fit',
      width: 821,
      height: 235,
      scrollable: 'vertical',
      items: [{
          xtype: 'panel',
          id: 'markerInClustersId',
          autoScroll: true,
          layout: 'vbox',
          height: '100%',
          width: '20%'
        },
        {
          xtype: 'panel',
          id: 'infoMarkerId',
          autoScroll: true,
          height: '100%',
          width: '80%'
        }
      ]
    }).showAt(e);
    var markerInClusters = Ext.getCmp('markerInClustersId');
    markerInClusters.removeAll();
    var infoMarker = Ext.getCmp('infoMarkerId');
    cluster.features.forEach(function(marker) {
      if (marker.customOptions.objectType == 'CALL') {
        markerInClusters.add(Ext.create('Ext.Button', {
          text: 'Вызов№ ' + marker.customOptions.callCardNum,
          maxWidth: 150,
          minWidth: 150,
          margin: 5,
          listeners: {
            click: function() {
              var storeMarker = me.getStoreMarkerInfo(marker);
              infoMarker.removeAll();
              storeMarker.load({
                callback: function(records, operation, success) {
                  if (success == true) {
                    if (records.length == 0) {
                      Ext.Msg.alert('Ошибка', 'Данные о вызове временно не доступны');
                    }
                  }
                  if (success == false) {
                    try {
                      Ext.Msg.alert('Ошибка', 'Данные о вызове временно не доступны');
                    } catch (e) {
                      Ext.Msg.alert('Ошибка', 'Данные о вызове временно не доступны');
                    }
                  }
                  if (success == true) {
                    if (records.length > 0) {
                      infoMarker.add(Ext.create('Ext.Panel', {
                        layout: 'form',
                        resizable: true,
                        border: 'fit',
                        autoScroll: true,
                        resizable: false,
                        width: '100%',
                        items: [{
                          xtype: 'form',
                          height: '100%',
                          width: '100%',
                          margin: 0,
                          items: [{
                              xtype: 'displayfield',
                              name: 'callCardNum',
                              fieldLabel: 'Номер вызова',
                              labelWidth: '100%',
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              name: 'createTime',
                              fieldLabel: 'Время вызова',
                              labelWidth: '100%',
                              renderer: Ext.util.Format.dateRenderer('Y-m-d, h:i:s'),
                              margin: 0
                            },
                            {
                              xtype: 'textareafield',
                              name: 'reason',
                              labelWidth: 100,
                              width: 500,
                              readOnly: true,
                              fieldLabel: 'Повод к вызову',
                              margin: '0px 0px 5px 0px'
                            },
                            {
                              xtype: 'textareafield',
                              name: 'reasonComment',
                              labelWidth: 100,
                              width: 500,
                              readOnly: true,
                              fieldLabel: 'Комментарий',
                              margin: '5px 0px 0px 0px'
                            },
                            {
                              xtype: 'displayfield',
                              name: 'address',
                              labelWidth: '100%',
                              fieldLabel: 'Адрес места вызова',
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              name: 'enter',
                              labelWidth: '100%',
                              fieldLabel: 'Особенности входа',
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              name: 'phone',
                              labelWidth: '100%',
                              fieldLabel: 'Телефон',
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              name: 'fullName',
                              labelWidth: '100%',
                              fieldLabel: 'ФИО',
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              name: 'brigadeNum',
                              labelWidth: '100%',
                              fieldLabel: 'Номер бригады',
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              name: 'hospital',
                              labelWidth: '100%',
                              fieldLabel: 'Стационар',
                              margin: 0
                            }
                          ]
                        }],
                        listeners: {
                          afterrender: function(component, eOpts) {
                            var form = component.down('form');
                            form.loadRecord(storeMarker.first());
                          }
                        }
                      }))
                    }
                  }
                }
              })
            }
          }
        }))
      }

      if (marker.customOptions.objectType == 'BRIGADE') {
        markerInClusters.add(Ext.create('Ext.Button', {
          text: 'Бригада № ' + marker.customOptions.brigadeNum,
          maxWidth: 150,
          minWidth: 150,
          margin: 5,
          listeners: {
            click: function() {
              var storeMarker = me.getStoreMarkerInfo(marker);
              infoMarker.removeAll();
              storeMarker.load({
                callback: function(records, operation, success) {
                  if (success == true) {
                    if (records.length == 0) {
                      Ext.Msg.alert('Ошибка', 'Данные о вызове временно не доступны');
                    }
                  }
                  if (success == false) {
                    try {
                      Ext.Msg.alert('Ошибка', 'Данные о вызове временно не доступны');
                    } catch (e) {
                      Ext.Msg.alert('Ошибка', 'Данные о вызове временно не доступны');
                    }
                  }
                  if (success == true) {
                    if (records.length > 0) {
                      infoMarker.add(Ext.create('Ext.Panel', {
                        layout: 'form',
                        resizable: true,
                        border: 'fit',
                        autoScroll: true,
                        resizable: false,
                        width: '100%',
                        items: [{
                          xtype: 'form',
                          autoScroll: true,
                          height: '100%',
                          width: '100%',
                          items: [{
                              xtype: 'displayfield',
                              name: 'brigadeNum',
                              fieldLabel: 'Номер бригады',
                              labelWidth: '100%',
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              value: marker.customOptions.profile,
                              fieldLabel: 'Профиль бригады',
                              labelWidth: '100%',
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              name: 'status',
                              fieldLabel: 'Статус бригады',
                              labelWidth: '100%',
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              fieldLabel: 'Старший бригады',
                              name: 'chefName',
                              labelWidth: '100%',
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              name: 'callCardNum',
                              fieldLabel: 'Вызов',
                              labelWidth: '100%',
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              name: 'address',
                              fieldLabel: 'Адрес места вызова',
                              labelWidth: 150,
                              margin: 0
                            },
                            {
                              xtype: 'displayfield',
                              name: 'passToBrigadeTime',
                              fieldLabel: 'Время получения бригадой',
                              renderer: Ext.util.Format.dateRenderer('Y-m-d, h:i:s'),
                              labelWidth: '100%',
                              margin: 0
                            }

                          ]
                        }],
                        listeners: {
                          afterrender: function(component, eOpts) {
                            var form = component.down('form');
                            form.loadRecord(storeMarker.first());
                          }
                        }
                      }))
                    }
                  }
                }
              })
            }
          }
        }))
      }
    })
  },

  markerClick: function(object, e, infoMarker) {
    var me = this;
    var win = Ext.WindowManager.getActive();
    if (win) {
      win.close();
    }
    var ymapWrapper = Ext.getCmp('mapId');
    var sizeCmp = ymapWrapper.getSize();
    sizeCmp.width = sizeCmp.width * 1.55;
    if (object.customOptions.objectType == 'BRIGADE') {
      if ((sizeCmp.width / 2) < e[0]) {
        e[0] -= 500;
        e[1] += 20;
      }
      if ((sizeCmp.height / 2) < e[1]) {
        e[1] -= 270;
      }
      infoMarker.load({
        callback: function(records, operation, success) {
          if (success == true) {
            if (records.length == 0) {
              Ext.Msg.alert('Ошибка', 'Данные о бригаде временно не доступны');
            }
          }
          if (success == false) {
            try {
              Ext.Msg.alert('Ошибка', 'Данные о бригаде временно не доступны');
            } catch (e) {
              Ext.Msg.alert('Ошибка', 'Данные о бригаде временно не доступны');
            }
          }
          if (success == true) {
            if (records.length > 0) {
              Ext.create('Ext.window.Window', {
                title: 'Бригада',
                layout: 'form',
                resizable: true,
                border: 'fit',
                autoScroll: true,
                resizable: false,
                width: 450,
                //height: 250,
                items: [{
                  xtype: 'form',
                  autoScroll: true,
                  height: '100%',
                  width: '100%',
                  items: [{
                      xtype: 'displayfield',
                      name: 'brigadeNum',
                      fieldLabel: 'Номер бригады',
                      labelWidth: '100%',
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      value: object.customOptions.profile,
                      fieldLabel: 'Профиль бригады',
                      labelWidth: '100%',
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      name: 'status',
                      fieldLabel: 'Статус бригады',
                      labelWidth: '100%',
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      fieldLabel: 'Старший бригады',
                      name: 'chefName',
                      labelWidth: '100%',
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      name: 'callCardNum',
                      fieldLabel: 'Вызов',
                      labelWidth: '100%',
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      name: 'address',
                      fieldLabel: 'Адрес места вызова',
                      labelWidth: 150,
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      name: 'passToBrigadeTime',
                      fieldLabel: 'Время получения бригадой',
                      renderer: Ext.util.Format.dateRenderer('Y-m-d, h:i:s'),
                      labelWidth: '100%',
                      margin: 0
                    }

                  ]
                }],
                listeners: {
                  afterrender: function(component, eOpts) {
                    var form = component.down('form');
                    form.loadRecord(infoMarker.first());
                  }
                }
              }).showAt(e);
            }
          }
        }
      })
    };
    if (object.customOptions.objectType == 'CALL') {
      if ((sizeCmp.width / 2) < e[0]) {
        e[0] -= 600;
        e[1] += 20;
      }
      if ((sizeCmp.height / 2) < e[1]) {
        e[1] -= 450;
      }
      infoMarker.load({
        callback: function(records, operation, success) {
          if (success == true) {
            if (records.length == 0) {
              Ext.Msg.alert('Ошибка', 'Данные о вызове временно не доступны');
            }
          }
          if (success == false) {
            try {
              Ext.Msg.alert('Ошибка', 'Данные о вызове временно не доступны');
            } catch (e) {
              Ext.Msg.alert('Ошибка', 'Данные о вызове временно не доступны');
            }
          }
          if (success == true) {
            if (records.length > 0) {
              Ext.create('Ext.window.Window', {
                title: 'Вызов',
                layout: 'form',
                resizable: true,
                id: 'winId',
                border: 'fit',
                autoScroll: true,
                resizable: false,
                width: 550,
                items: [{
                  xtype: 'form',
                  height: '100%',
                  width: '100%',
                  margin: 0,
                  items: [{
                      xtype: 'displayfield',
                      name: 'callCardNum',
                      fieldLabel: 'Номер вызова',
                      labelWidth: '100%',
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      name: 'createTime',
                      fieldLabel: 'Время вызова',
                      labelWidth: '100%',
                      renderer: Ext.util.Format.dateRenderer('Y-m-d, h:i:s'),
                      margin: 0
                    },
                    {
                      xtype: 'textareafield',
                      name: 'reason',
                      labelWidth: 100,
                      width: 500,
                      readOnly: true,
                      fieldLabel: 'Повод к вызову',
                      margin: '0px 0px 5px 0px'
                    },
                    {
                      xtype: 'textareafield',
                      name: 'reasonComment',
                      labelWidth: 100,
                      width: 500,
                      readOnly: true,
                      fieldLabel: 'Комментарий',
                      margin: '5px 0px 0px 0px'
                    },
                    {
                      xtype: 'displayfield',
                      name: 'address',
                      labelWidth: '100%',
                      fieldLabel: 'Адрес места вызова',
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      name: 'enter',
                      labelWidth: '100%',
                      fieldLabel: 'Особенности входа',
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      name: 'phone',
                      labelWidth: '100%',
                      fieldLabel: 'Телефон',
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      name: 'fullName',
                      labelWidth: '100%',
                      fieldLabel: 'ФИО',
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      name: 'brigadeNum',
                      labelWidth: '100%',
                      fieldLabel: 'Номер бригады',
                      margin: 0
                    },
                    {
                      xtype: 'displayfield',
                      name: 'hospital',
                      labelWidth: '100%',
                      fieldLabel: 'Стационар',
                      margin: 0
                    }
                  ]
                }],
                listeners: {
                  afterrender: function(component, eOpts) {
                    var form = component.down('form');
                    form.loadRecord(infoMarker.first());
                  }
                }
              }).showAt(e);
            }
          }
        }
      })
    }
  }
});
